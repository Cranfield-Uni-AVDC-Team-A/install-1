// Generated by gencpp from file behaviour/area_geometry.msg
// DO NOT EDIT!


#ifndef BEHAVIOUR_MESSAGE_AREA_GEOMETRY_H
#define BEHAVIOUR_MESSAGE_AREA_GEOMETRY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace behaviour
{
template <class ContainerAllocator>
struct area_geometry_
{
  typedef area_geometry_<ContainerAllocator> Type;

  area_geometry_()
    : header()
    , points(0)
    , lat1(0.0)
    , lat2(0.0)
    , lat3(0.0)
    , lat4(0.0)
    , lon1(0.0)
    , lon2(0.0)
    , lon3(0.0)
    , lon4(0.0)
    , alt1(0.0)
    , alt2(0.0)
    , alt3(0.0)
    , alt4(0.0)  {
    }
  area_geometry_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , points(0)
    , lat1(0.0)
    , lat2(0.0)
    , lat3(0.0)
    , lat4(0.0)
    , lon1(0.0)
    , lon2(0.0)
    , lon3(0.0)
    , lon4(0.0)
    , alt1(0.0)
    , alt2(0.0)
    , alt3(0.0)
    , alt4(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int8_t _points_type;
  _points_type points;

   typedef double _lat1_type;
  _lat1_type lat1;

   typedef double _lat2_type;
  _lat2_type lat2;

   typedef double _lat3_type;
  _lat3_type lat3;

   typedef double _lat4_type;
  _lat4_type lat4;

   typedef double _lon1_type;
  _lon1_type lon1;

   typedef double _lon2_type;
  _lon2_type lon2;

   typedef double _lon3_type;
  _lon3_type lon3;

   typedef double _lon4_type;
  _lon4_type lon4;

   typedef float _alt1_type;
  _alt1_type alt1;

   typedef float _alt2_type;
  _alt2_type alt2;

   typedef float _alt3_type;
  _alt3_type alt3;

   typedef float _alt4_type;
  _alt4_type alt4;





  typedef boost::shared_ptr< ::behaviour::area_geometry_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::behaviour::area_geometry_<ContainerAllocator> const> ConstPtr;

}; // struct area_geometry_

typedef ::behaviour::area_geometry_<std::allocator<void> > area_geometry;

typedef boost::shared_ptr< ::behaviour::area_geometry > area_geometryPtr;
typedef boost::shared_ptr< ::behaviour::area_geometry const> area_geometryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::behaviour::area_geometry_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::behaviour::area_geometry_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::behaviour::area_geometry_<ContainerAllocator1> & lhs, const ::behaviour::area_geometry_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.points == rhs.points &&
    lhs.lat1 == rhs.lat1 &&
    lhs.lat2 == rhs.lat2 &&
    lhs.lat3 == rhs.lat3 &&
    lhs.lat4 == rhs.lat4 &&
    lhs.lon1 == rhs.lon1 &&
    lhs.lon2 == rhs.lon2 &&
    lhs.lon3 == rhs.lon3 &&
    lhs.lon4 == rhs.lon4 &&
    lhs.alt1 == rhs.alt1 &&
    lhs.alt2 == rhs.alt2 &&
    lhs.alt3 == rhs.alt3 &&
    lhs.alt4 == rhs.alt4;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::behaviour::area_geometry_<ContainerAllocator1> & lhs, const ::behaviour::area_geometry_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace behaviour

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::behaviour::area_geometry_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::behaviour::area_geometry_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::behaviour::area_geometry_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::behaviour::area_geometry_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::behaviour::area_geometry_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::behaviour::area_geometry_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::behaviour::area_geometry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "da2d0d4b375b18348bd16d548b3bb2d9";
  }

  static const char* value(const ::behaviour::area_geometry_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xda2d0d4b375b1834ULL;
  static const uint64_t static_value2 = 0x8bd16d548b3bb2d9ULL;
};

template<class ContainerAllocator>
struct DataType< ::behaviour::area_geometry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "behaviour/area_geometry";
  }

  static const char* value(const ::behaviour::area_geometry_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::behaviour::area_geometry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"int8 points\n"
"float64 lat1\n"
"float64 lat2\n"
"float64 lat3\n"
"float64 lat4\n"
"float64 lon1\n"
"float64 lon2\n"
"float64 lon3\n"
"float64 lon4\n"
"float32 alt1\n"
"float32 alt2\n"
"float32 alt3\n"
"float32 alt4\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::behaviour::area_geometry_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::behaviour::area_geometry_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.points);
      stream.next(m.lat1);
      stream.next(m.lat2);
      stream.next(m.lat3);
      stream.next(m.lat4);
      stream.next(m.lon1);
      stream.next(m.lon2);
      stream.next(m.lon3);
      stream.next(m.lon4);
      stream.next(m.alt1);
      stream.next(m.alt2);
      stream.next(m.alt3);
      stream.next(m.alt4);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct area_geometry_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::behaviour::area_geometry_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::behaviour::area_geometry_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "points: ";
    Printer<int8_t>::stream(s, indent + "  ", v.points);
    s << indent << "lat1: ";
    Printer<double>::stream(s, indent + "  ", v.lat1);
    s << indent << "lat2: ";
    Printer<double>::stream(s, indent + "  ", v.lat2);
    s << indent << "lat3: ";
    Printer<double>::stream(s, indent + "  ", v.lat3);
    s << indent << "lat4: ";
    Printer<double>::stream(s, indent + "  ", v.lat4);
    s << indent << "lon1: ";
    Printer<double>::stream(s, indent + "  ", v.lon1);
    s << indent << "lon2: ";
    Printer<double>::stream(s, indent + "  ", v.lon2);
    s << indent << "lon3: ";
    Printer<double>::stream(s, indent + "  ", v.lon3);
    s << indent << "lon4: ";
    Printer<double>::stream(s, indent + "  ", v.lon4);
    s << indent << "alt1: ";
    Printer<float>::stream(s, indent + "  ", v.alt1);
    s << indent << "alt2: ";
    Printer<float>::stream(s, indent + "  ", v.alt2);
    s << indent << "alt3: ";
    Printer<float>::stream(s, indent + "  ", v.alt3);
    s << indent << "alt4: ";
    Printer<float>::stream(s, indent + "  ", v.alt4);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BEHAVIOUR_MESSAGE_AREA_GEOMETRY_H
