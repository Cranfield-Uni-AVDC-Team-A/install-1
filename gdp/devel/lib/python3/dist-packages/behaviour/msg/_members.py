# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from behaviour/members.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import behaviour.msg
import std_msgs.msg

class members(genpy.Message):
  _md5sum = "d2196bf9ce28bd860ccf7a719e388ff5"
  _type = "behaviour/members"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
drone_state[] drone_states
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: behaviour/drone_state
Header header
int8 drone_id
int8 mode
int8 type
float64 messagetime
drone_geometry drone_geometry
int8 battery
int8 drone_soh
score score
task task
================================================================================
MSG: behaviour/drone_geometry
Header header
float64 lat
float64 lon
float32 alt
float32 yaw
float32 roll
float32 pitch
================================================================================
MSG: behaviour/score
Header header
int8 drone_id
int8 task_id
float32 score

================================================================================
MSG: behaviour/task
Header header
int8 task_id
task_geometry task_geometry
int8 allocated
int8 type

================================================================================
MSG: behaviour/task_geometry
Header header
float64 lat
float64 lon
float32 alt
"""
  __slots__ = ['header','drone_states']
  _slot_types = ['std_msgs/Header','behaviour/drone_state[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,drone_states

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(members, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.drone_states is None:
        self.drone_states = []
    else:
      self.header = std_msgs.msg.Header()
      self.drone_states = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.drone_states)
      buff.write(_struct_I.pack(length))
      for val1 in self.drone_states:
        _v1 = val1.header
        _x = _v1.seq
        buff.write(_get_struct_I().pack(_x))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_3bd().pack(_x.drone_id, _x.mode, _x.type, _x.messagetime))
        _v3 = val1.drone_geometry
        _v4 = _v3.header
        _x = _v4.seq
        buff.write(_get_struct_I().pack(_x))
        _v5 = _v4.stamp
        _x = _v5
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v4.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v3
        buff.write(_get_struct_2d4f().pack(_x.lat, _x.lon, _x.alt, _x.yaw, _x.roll, _x.pitch))
        _x = val1
        buff.write(_get_struct_2b().pack(_x.battery, _x.drone_soh))
        _v6 = val1.score
        _v7 = _v6.header
        _x = _v7.seq
        buff.write(_get_struct_I().pack(_x))
        _v8 = _v7.stamp
        _x = _v8
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v7.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v6
        buff.write(_get_struct_2bf().pack(_x.drone_id, _x.task_id, _x.score))
        _v9 = val1.task
        _v10 = _v9.header
        _x = _v10.seq
        buff.write(_get_struct_I().pack(_x))
        _v11 = _v10.stamp
        _x = _v11
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v10.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v9.task_id
        buff.write(_get_struct_b().pack(_x))
        _v12 = _v9.task_geometry
        _v13 = _v12.header
        _x = _v13.seq
        buff.write(_get_struct_I().pack(_x))
        _v14 = _v13.stamp
        _x = _v14
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v13.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v12
        buff.write(_get_struct_2df().pack(_x.lat, _x.lon, _x.alt))
        _x = _v9
        buff.write(_get_struct_2b().pack(_x.allocated, _x.type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.drone_states is None:
        self.drone_states = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.drone_states = []
      for i in range(0, length):
        val1 = behaviour.msg.drone_state()
        _v15 = val1.header
        start = end
        end += 4
        (_v15.seq,) = _get_struct_I().unpack(str[start:end])
        _v16 = _v15.stamp
        _x = _v16
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v15.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v15.frame_id = str[start:end]
        _x = val1
        start = end
        end += 11
        (_x.drone_id, _x.mode, _x.type, _x.messagetime,) = _get_struct_3bd().unpack(str[start:end])
        _v17 = val1.drone_geometry
        _v18 = _v17.header
        start = end
        end += 4
        (_v18.seq,) = _get_struct_I().unpack(str[start:end])
        _v19 = _v18.stamp
        _x = _v19
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v18.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v18.frame_id = str[start:end]
        _x = _v17
        start = end
        end += 32
        (_x.lat, _x.lon, _x.alt, _x.yaw, _x.roll, _x.pitch,) = _get_struct_2d4f().unpack(str[start:end])
        _x = val1
        start = end
        end += 2
        (_x.battery, _x.drone_soh,) = _get_struct_2b().unpack(str[start:end])
        _v20 = val1.score
        _v21 = _v20.header
        start = end
        end += 4
        (_v21.seq,) = _get_struct_I().unpack(str[start:end])
        _v22 = _v21.stamp
        _x = _v22
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v21.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v21.frame_id = str[start:end]
        _x = _v20
        start = end
        end += 6
        (_x.drone_id, _x.task_id, _x.score,) = _get_struct_2bf().unpack(str[start:end])
        _v23 = val1.task
        _v24 = _v23.header
        start = end
        end += 4
        (_v24.seq,) = _get_struct_I().unpack(str[start:end])
        _v25 = _v24.stamp
        _x = _v25
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v24.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v24.frame_id = str[start:end]
        start = end
        end += 1
        (_v23.task_id,) = _get_struct_b().unpack(str[start:end])
        _v26 = _v23.task_geometry
        _v27 = _v26.header
        start = end
        end += 4
        (_v27.seq,) = _get_struct_I().unpack(str[start:end])
        _v28 = _v27.stamp
        _x = _v28
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v27.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v27.frame_id = str[start:end]
        _x = _v26
        start = end
        end += 20
        (_x.lat, _x.lon, _x.alt,) = _get_struct_2df().unpack(str[start:end])
        _x = _v23
        start = end
        end += 2
        (_x.allocated, _x.type,) = _get_struct_2b().unpack(str[start:end])
        self.drone_states.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.drone_states)
      buff.write(_struct_I.pack(length))
      for val1 in self.drone_states:
        _v29 = val1.header
        _x = _v29.seq
        buff.write(_get_struct_I().pack(_x))
        _v30 = _v29.stamp
        _x = _v30
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v29.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_3bd().pack(_x.drone_id, _x.mode, _x.type, _x.messagetime))
        _v31 = val1.drone_geometry
        _v32 = _v31.header
        _x = _v32.seq
        buff.write(_get_struct_I().pack(_x))
        _v33 = _v32.stamp
        _x = _v33
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v32.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v31
        buff.write(_get_struct_2d4f().pack(_x.lat, _x.lon, _x.alt, _x.yaw, _x.roll, _x.pitch))
        _x = val1
        buff.write(_get_struct_2b().pack(_x.battery, _x.drone_soh))
        _v34 = val1.score
        _v35 = _v34.header
        _x = _v35.seq
        buff.write(_get_struct_I().pack(_x))
        _v36 = _v35.stamp
        _x = _v36
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v35.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v34
        buff.write(_get_struct_2bf().pack(_x.drone_id, _x.task_id, _x.score))
        _v37 = val1.task
        _v38 = _v37.header
        _x = _v38.seq
        buff.write(_get_struct_I().pack(_x))
        _v39 = _v38.stamp
        _x = _v39
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v38.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v37.task_id
        buff.write(_get_struct_b().pack(_x))
        _v40 = _v37.task_geometry
        _v41 = _v40.header
        _x = _v41.seq
        buff.write(_get_struct_I().pack(_x))
        _v42 = _v41.stamp
        _x = _v42
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v41.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v40
        buff.write(_get_struct_2df().pack(_x.lat, _x.lon, _x.alt))
        _x = _v37
        buff.write(_get_struct_2b().pack(_x.allocated, _x.type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.drone_states is None:
        self.drone_states = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.drone_states = []
      for i in range(0, length):
        val1 = behaviour.msg.drone_state()
        _v43 = val1.header
        start = end
        end += 4
        (_v43.seq,) = _get_struct_I().unpack(str[start:end])
        _v44 = _v43.stamp
        _x = _v44
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v43.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v43.frame_id = str[start:end]
        _x = val1
        start = end
        end += 11
        (_x.drone_id, _x.mode, _x.type, _x.messagetime,) = _get_struct_3bd().unpack(str[start:end])
        _v45 = val1.drone_geometry
        _v46 = _v45.header
        start = end
        end += 4
        (_v46.seq,) = _get_struct_I().unpack(str[start:end])
        _v47 = _v46.stamp
        _x = _v47
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v46.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v46.frame_id = str[start:end]
        _x = _v45
        start = end
        end += 32
        (_x.lat, _x.lon, _x.alt, _x.yaw, _x.roll, _x.pitch,) = _get_struct_2d4f().unpack(str[start:end])
        _x = val1
        start = end
        end += 2
        (_x.battery, _x.drone_soh,) = _get_struct_2b().unpack(str[start:end])
        _v48 = val1.score
        _v49 = _v48.header
        start = end
        end += 4
        (_v49.seq,) = _get_struct_I().unpack(str[start:end])
        _v50 = _v49.stamp
        _x = _v50
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v49.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v49.frame_id = str[start:end]
        _x = _v48
        start = end
        end += 6
        (_x.drone_id, _x.task_id, _x.score,) = _get_struct_2bf().unpack(str[start:end])
        _v51 = val1.task
        _v52 = _v51.header
        start = end
        end += 4
        (_v52.seq,) = _get_struct_I().unpack(str[start:end])
        _v53 = _v52.stamp
        _x = _v53
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v52.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v52.frame_id = str[start:end]
        start = end
        end += 1
        (_v51.task_id,) = _get_struct_b().unpack(str[start:end])
        _v54 = _v51.task_geometry
        _v55 = _v54.header
        start = end
        end += 4
        (_v55.seq,) = _get_struct_I().unpack(str[start:end])
        _v56 = _v55.stamp
        _x = _v56
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v55.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v55.frame_id = str[start:end]
        _x = _v54
        start = end
        end += 20
        (_x.lat, _x.lon, _x.alt,) = _get_struct_2df().unpack(str[start:end])
        _x = _v51
        start = end
        end += 2
        (_x.allocated, _x.type,) = _get_struct_2b().unpack(str[start:end])
        self.drone_states.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2b = None
def _get_struct_2b():
    global _struct_2b
    if _struct_2b is None:
        _struct_2b = struct.Struct("<2b")
    return _struct_2b
_struct_2bf = None
def _get_struct_2bf():
    global _struct_2bf
    if _struct_2bf is None:
        _struct_2bf = struct.Struct("<2bf")
    return _struct_2bf
_struct_2d4f = None
def _get_struct_2d4f():
    global _struct_2d4f
    if _struct_2d4f is None:
        _struct_2d4f = struct.Struct("<2d4f")
    return _struct_2d4f
_struct_2df = None
def _get_struct_2df():
    global _struct_2df
    if _struct_2df is None:
        _struct_2df = struct.Struct("<2df")
    return _struct_2df
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3bd = None
def _get_struct_3bd():
    global _struct_3bd
    if _struct_3bd is None:
        _struct_3bd = struct.Struct("<3bd")
    return _struct_3bd
_struct_b = None
def _get_struct_b():
    global _struct_b
    if _struct_b is None:
        _struct_b = struct.Struct("<b")
    return _struct_b
