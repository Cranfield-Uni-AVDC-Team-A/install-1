# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from behaviour/mission.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class mission(genpy.Message):
  _md5sum = "f50631df6e5a5b429641093d499b4615"
  _type = "behaviour/mission"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
int8 points
float64 lat1
float64 lat2
float64 lat3
float64 lat4
float64 lat5
float64 lat6
float64 lat7
float64 lat8
float64 lon1
float64 lon2
float64 lon3
float64 lon4
float64 lon5
float64 lon6
float64 lon7
float64 lon8
float32 alt1
float32 alt2
float32 alt3
float32 alt4
float32 alt5
float32 alt6
float32 alt7
float32 alt8

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','points','lat1','lat2','lat3','lat4','lat5','lat6','lat7','lat8','lon1','lon2','lon3','lon4','lon5','lon6','lon7','lon8','alt1','alt2','alt3','alt4','alt5','alt6','alt7','alt8']
  _slot_types = ['std_msgs/Header','int8','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,points,lat1,lat2,lat3,lat4,lat5,lat6,lat7,lat8,lon1,lon2,lon3,lon4,lon5,lon6,lon7,lon8,alt1,alt2,alt3,alt4,alt5,alt6,alt7,alt8

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(mission, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.points is None:
        self.points = 0
      if self.lat1 is None:
        self.lat1 = 0.
      if self.lat2 is None:
        self.lat2 = 0.
      if self.lat3 is None:
        self.lat3 = 0.
      if self.lat4 is None:
        self.lat4 = 0.
      if self.lat5 is None:
        self.lat5 = 0.
      if self.lat6 is None:
        self.lat6 = 0.
      if self.lat7 is None:
        self.lat7 = 0.
      if self.lat8 is None:
        self.lat8 = 0.
      if self.lon1 is None:
        self.lon1 = 0.
      if self.lon2 is None:
        self.lon2 = 0.
      if self.lon3 is None:
        self.lon3 = 0.
      if self.lon4 is None:
        self.lon4 = 0.
      if self.lon5 is None:
        self.lon5 = 0.
      if self.lon6 is None:
        self.lon6 = 0.
      if self.lon7 is None:
        self.lon7 = 0.
      if self.lon8 is None:
        self.lon8 = 0.
      if self.alt1 is None:
        self.alt1 = 0.
      if self.alt2 is None:
        self.alt2 = 0.
      if self.alt3 is None:
        self.alt3 = 0.
      if self.alt4 is None:
        self.alt4 = 0.
      if self.alt5 is None:
        self.alt5 = 0.
      if self.alt6 is None:
        self.alt6 = 0.
      if self.alt7 is None:
        self.alt7 = 0.
      if self.alt8 is None:
        self.alt8 = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.points = 0
      self.lat1 = 0.
      self.lat2 = 0.
      self.lat3 = 0.
      self.lat4 = 0.
      self.lat5 = 0.
      self.lat6 = 0.
      self.lat7 = 0.
      self.lat8 = 0.
      self.lon1 = 0.
      self.lon2 = 0.
      self.lon3 = 0.
      self.lon4 = 0.
      self.lon5 = 0.
      self.lon6 = 0.
      self.lon7 = 0.
      self.lon8 = 0.
      self.alt1 = 0.
      self.alt2 = 0.
      self.alt3 = 0.
      self.alt4 = 0.
      self.alt5 = 0.
      self.alt6 = 0.
      self.alt7 = 0.
      self.alt8 = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_b16d8f().pack(_x.points, _x.lat1, _x.lat2, _x.lat3, _x.lat4, _x.lat5, _x.lat6, _x.lat7, _x.lat8, _x.lon1, _x.lon2, _x.lon3, _x.lon4, _x.lon5, _x.lon6, _x.lon7, _x.lon8, _x.alt1, _x.alt2, _x.alt3, _x.alt4, _x.alt5, _x.alt6, _x.alt7, _x.alt8))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 161
      (_x.points, _x.lat1, _x.lat2, _x.lat3, _x.lat4, _x.lat5, _x.lat6, _x.lat7, _x.lat8, _x.lon1, _x.lon2, _x.lon3, _x.lon4, _x.lon5, _x.lon6, _x.lon7, _x.lon8, _x.alt1, _x.alt2, _x.alt3, _x.alt4, _x.alt5, _x.alt6, _x.alt7, _x.alt8,) = _get_struct_b16d8f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_b16d8f().pack(_x.points, _x.lat1, _x.lat2, _x.lat3, _x.lat4, _x.lat5, _x.lat6, _x.lat7, _x.lat8, _x.lon1, _x.lon2, _x.lon3, _x.lon4, _x.lon5, _x.lon6, _x.lon7, _x.lon8, _x.alt1, _x.alt2, _x.alt3, _x.alt4, _x.alt5, _x.alt6, _x.alt7, _x.alt8))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 161
      (_x.points, _x.lat1, _x.lat2, _x.lat3, _x.lat4, _x.lat5, _x.lat6, _x.lat7, _x.lat8, _x.lon1, _x.lon2, _x.lon3, _x.lon4, _x.lon5, _x.lon6, _x.lon7, _x.lon8, _x.alt1, _x.alt2, _x.alt3, _x.alt4, _x.alt5, _x.alt6, _x.alt7, _x.alt8,) = _get_struct_b16d8f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_b16d8f = None
def _get_struct_b16d8f():
    global _struct_b16d8f
    if _struct_b16d8f is None:
        _struct_b16d8f = struct.Struct("<b16d8f")
    return _struct_b16d8f
